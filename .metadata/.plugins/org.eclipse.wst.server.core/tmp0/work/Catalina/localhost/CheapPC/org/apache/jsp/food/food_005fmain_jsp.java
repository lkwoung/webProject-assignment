/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-12-17 14:18:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.food;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import food.*;
import java.util.ArrayList;

public final class food_005fmain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("food");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("   <title>PC방 음식메뉴 목록</title>\r\n");
      out.write("\r\n");
      out.write("   <style type=\"text/css\">\r\n");
      out.write("     table {\r\n");
      out.write("      margin: 70px auto;\r\n");
      out.write("       width: 100%;\r\n");
      out.write("      }\r\n");
      out.write("      th, td {\r\n");
      out.write("      padding:20px;\r\n");
      out.write("        text-align: center;\r\n");
      out.write("      }\r\n");
      out.write("      h6{\r\n");
      out.write("      font-size:4rem;\r\n");
      out.write("      color:yellow;\r\n");
      out.write("      }\r\n");
      out.write("      h7{\r\n");
      out.write("      font-size:3rem;\r\n");
      out.write("      color:rgb(159,201,60);}\r\n");
      out.write("      h8{\r\n");
      out.write("      font-size:2rem;\r\n");
      out.write("      color:rgb(255,255,255);}\r\n");
      out.write("      dis{\r\n");
      out.write("      font-size:2rem;\r\n");
      out.write("      color:rgb(255,255,255);\r\n");
      out.write("      }\r\n");
      out.write("   </style>\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"../css/user.css\">\r\n");
      out.write("     <link href=\"https://fonts.googleapis.com/earlyaccess/hanna.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n");
      out.write("     \r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>   \r\n");
      out.write("<div class=\"nav-header\">\r\n");
      out.write("    <div class=\"nav-brand\">\r\n");
      out.write("    <i class=\"fa fa-bars fa-3x\"></i>\r\n");
      out.write("    <div class=\"header-links\">\r\n");
      out.write("      <ul>\r\n");
      out.write("        <li data-menuanchor=\"thirdPage\"><a href=\"../login/logoutAction.jsp\">LOGOUT</a></li>\r\n");
      out.write("        <li data-menuanchor=\"secondPage\"><a href=\"../seat/userSeat.jsp\">좌석</a></li>\r\n");
      out.write("      </ul>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("  </div>\r\n");
      out.write("   \r\n");
      out.write("\t");
 
		ServletContext sc = getServletContext();
		ArrayList<foodBean> foodList = food_DButil.getFoodList(sc);
    
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   <table>\r\n");
      out.write("   <caption>\r\n");
      out.write("      <h6> \r\n");
      out.write("      싸다구 메뉴\r\n");
      out.write("      </h7>\r\n");
      out.write("      <p> \r\n");
      out.write("      맛있는 먹거리를 제공하는 싸다구는 언제나 가족이 먹을 수 있다는 마음으로 음식을 만들고 있습니다.<br>\r\n");
      out.write("      해당 페이지는 메뉴를 보여주는 페이지이며 실제 음식 주문은 PC방에서 가능합니다. 감사합니다.\r\n");
      out.write("      </h10>\r\n");
      out.write("      </caption>\r\n");
      out.write("      <tbody>\r\n");
      out.write("      \r\n");
      out.write("      ");
 
		int idx = 0;
		int size = foodList.size();//arraylist의 크기
         
		for (int i =0; i<(size/3)+1; i++) {
      
      out.write("\r\n");
      out.write("      \r\n");
      out.write("        <tr>\r\n");
      out.write("      ");
 
      	for (int j =0; j<3; j++) {
			if (idx >= size){
				break;
			}
			foodBean food = foodList.get(idx);
      
      out.write("\r\n");
      out.write("\r\n");
      out.write("          <td>\r\n");
      out.write("          <img src = ");
      out.print(food.getImage() );
      out.write("\r\n");
      out.write("         style = \" width: 300px;\r\n");
      out.write("           height: 300px;\r\n");
      out.write("           object-fit: cover;\r\n");
      out.write("                    \"/>\r\n");
      out.write("         <p>\r\n");
      out.write("         <h7><b>");
      out.print(food.getFood_Name());
      out.write("</b></h7>\r\n");
      out.write("         <p>\r\n");
      out.write("         <p>");
      out.print(food.getDescription());
      out.write("\r\n");
      out.write("         <p>   ");
 int a = food.getCode(); 
      out.write("\r\n");
      out.write("         <h8>");
      out.print(food.getPrice() );
      out.write("원\r\n");
      out.write("         </td>\r\n");
      out.write("         ");

         idx++;   
      }
      
      out.write("\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");

         }
      
      out.write("\r\n");
      out.write("      </tbody>\r\n");
      out.write("    </table>\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("<footer class=\"container\">\r\n");
      out.write("<p>&copy; 싸다구PC</p>\r\n");
      out.write("</footer>   \r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
